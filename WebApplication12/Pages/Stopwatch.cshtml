@page "/stop-watch"
@using System.Timers;
<h1>Stopwatch</h1>
<p>This component demonstrates Stopwatch</p>
<div class="">
    <div class="text-center">
        <code>Contador:</code> <kbd>@Count</kbd>
    </div>
    <div class="pt-1">
        <code>Operação no momento:</code> <span class="small">@OperationText</span>
    </div>
    <div class="form-group pt-2">
        <label for="exampleInputEmail1">Número Inicial</label>
        <input class="form-control" type="text" bind="@Initials" disabled="@BtnDisabled" />
        <small id="emailHelp" class="form-text text-muted">Digite um valor para inializar (número)</small>
    </div>
    <div class="form-group pt-2">
        <label for="exampleInputEmail1">Incrementando ou Decrementando Valor</label>
        <input class="form-control" type="text" bind="@Jump" disabled="@BtnDisabled" />
        <small id="emailHelp" class="form-text text-muted">Digite um valor para salto (número)</small>
    </div>
    <div class="row pt-2">
        <div class="col-4">
            <button class="btn btn-success btn-block" onclick="@Increment" disabled="@BtnDisabled">+</button>
        </div>
        <div class="col-4">
            <button class="btn btn-info btn-block" onclick="@Decrease" disabled="@BtnDisabled">-</button>
        </div>
        <div class="col-4">
            <button class="btn btn-danger btn-block" onclick="@Stop" disabled="@(!BtnDisabled)">Stop</button>
        </div>
    </div>
</div>


@functions {

    enum Signal { Increment, Decrease, Stop };

    [Parameter]
    int? Count { get; set; } = 0;

    [Parameter]
    int? Initials { get; set; } = 1;

    [Parameter]
    int? Jump { get; set; } = 1;
        
    string OperationText { get; set; } = string.Empty;

    bool BtnDisabled = false;
    Signal SignalOperation = Signal.Stop;
    Timer TimerOperation = null;

    Func<Signal, int?, int?, int?> ExecuteOperation = (SignalOperation, Jump, Result) =>
    {
        if (SignalOperation == Signal.Increment)
        {
            Result += Jump;
        }
        else if (SignalOperation == Signal.Decrease)
        {
            Result -= Jump;
        }
        return Result;
    };

    Func<Signal, string> ExecuteStatus = (SignalOperation) =>
    {
        string result = string.Empty;
        switch (SignalOperation)
        {
            case Signal.Increment:
                {
                    result = "Incrementando ...";
                    break;
                }
            case Signal.Decrease:
                {
                    result = "Decrementando ...";
                    break;
                }
            case Signal.Stop:
                {
                    result = "Parado ...";
                    break;
                }
        }
        return result;
    };

    protected override void OnInit()
    {
        Stop();
    }


    void Increment()
    {
        SignalOperation = Signal.Increment;
        OperationText = ExecuteStatus(SignalOperation);
        Operation();
    }

    void Decrease()
    {
        SignalOperation = Signal.Decrease;
        OperationText = ExecuteStatus(SignalOperation);
        Operation();
    }

    void Stop()
    {
        TimerOperation?.Stop();
        TimerOperation?.Dispose();
        TimerOperation = null;
        SignalOperation = Signal.Stop;
        OperationText = ExecuteStatus(SignalOperation);
        BtnDisabled = false;
        StateHasChanged();
    }

    void OnTimeOperationEvent(Object source, ElapsedEventArgs e)
    {
        Count = ExecuteOperation(SignalOperation, Jump, Count);
        StateHasChanged();
    }

    void Operation()
    {
        if (Initials == null)
        {
            Initials = 0;
        }
        if (Jump <= 0 || Jump == null)
        {
            Jump = 1;
        }
        int period = 1000;
        if (TimerOperation == null)
        {
            TimerOperation = new Timer();
        }
        Count = Initials;
        TimerOperation.Interval = period;
        TimerOperation.Elapsed += OnTimeOperationEvent;
        TimerOperation.Start();
        BtnDisabled = true;
    }
}